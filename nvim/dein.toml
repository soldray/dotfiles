[[plugins]]
name = 'utility/dein'
repo = 'Shougo/dein.vim'

[[plugins]]
name = 'utility/nvim-web-devicons'
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
name = 'utility/nvim-tree'
repo = 'kyazdani42/nvim-tree.lua'
hook_add = '''
lua << EOF
require'nvim-tree'.setup {
  disable_netrw = true,
  hijack_netrw = true,
  --- open_on_setup = true,

  view = {
    width = 36,
    relativenumber = true,
  },

  actions = {
    open_file = {
      resize_window = true,
    },
  },

  renderer = {
    icons = {
      webdev_colors = true,
      git_placement = "before",
    },
  },
}
EOF
'''

[[plugins]]
name = 'utility/nvim-lsp-installer'
repo = 'williamboman/nvim-lsp-installer'

[[plugins]]
name = 'utility/lspconfig'
repo = 'neovim/nvim-lspconfig'
hook_add = '''
lua << EOF
vim.lsp.set_log_level("info")

local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

local on_attach = function(client, bufnr)
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
end

local lsp_installer = require('nvim-lsp-installer')
local lspconfig = require('lspconfig')

lsp_installer.setup()

for _, server in ipairs(lsp_installer.get_installed_servers()) do
  lspconfig[server.name].setup {
    on_attach = on_attach
  }
end

EOF
'''

[[plugins]]
name = 'utility/lsp_signature.nvim'
repo = 'ray-x/lsp_signature.nvim'
hook_add = '''
lua << EOF
require('lsp_signature').setup({
  bind = true,
  handler_opts = { border = 'none' },
  hint_prefix = "🐺 "
})
EOF
'''

[[plugins]]
name = 'utility/LuaSnip'
repo = 'L3MON4D3/LuaSnip'
hook_add = '''
imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 

lua << EOF
require("luasnip.loaders.from_snipmate").lazy_load()
EOF
'''

[[plugins]]
name = 'utility/nvim-treesitter'
repo = 'nvim-treesitter/nvim-treesitter'
hook_add = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "c", "cpp", "rust", "latex" },
  sync_install = true,

  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
}
EOF
'''

[[plugins]]
name = 'visual/plastic.vim'
repo = 'flrnd/plastic.vim'
hook_add = '''
colorscheme plastic
'''

[[plugins]]
name = 'visual/vim-airline'
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
'''

[[plugins]]
name = 'visual/indentLine'
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_char = '│'
let g:indentLine_setConceal = 1
'''

[[plugins]]
name = 'visual/vim-devicons'
repo = 'ryanoasis/vim-devicons'
